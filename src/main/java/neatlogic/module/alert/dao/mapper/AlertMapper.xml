<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="neatlogic.module.alert.dao.mapper.AlertMapper">
    <resultMap id="alertResultMap" type="neatlogic.framework.alert.dto.AlertVo">
        <id column="id" property="id"/>
        <result column="fromAlertId" property="fromAlertId"/>
        <result column="childAlertCount" property="childAlertCount"/>
        <result column="level" property="level"/>
        <result column="title" property="title"/>
        <result column="alertTime" property="alertTime"/>
        <result column="type" property="type"/>
        <result column="status" property="status"/>
        <result column="source" property="source"/>
        <result column="uniqueKey" property="uniqueKey"/>
        <result column="alertCount" property="alertCount"/>
        <result column="entityType" property="entityType"/>
        <result column="entityName" property="entityName"/>
        <result column="ip" property="port"/>
        <result column="content" property="attrObjStr"/>
        <association property="alertType" javaType="neatlogic.framework.alert.dto.AlertTypeVo">
            <result column="alertTypeName" property="name"/>
            <result column="alertTypeLabel" property="label"/>
            <result column="alertTypeId" property="id"/>
        </association>
        <association property="alertLevel" javaType="neatlogic.framework.alert.dto.AlertLevelVo">
            <result column="alertLevel" property="level"/>
            <result column="alertLevelName" property="name"/>
            <result column="alertLevelColor" property="color"/>
            <result column="alertLevelLabel" property="label"/>
        </association>
    </resultMap>

    <select id="getAlertOriginById" parameterType="java.lang.Long" resultType="neatlogic.framework.alert.dto.AlertOriginVo">
        select id,
               content as contentStr,
               type,
               time,
               error,
               status
        from alert_origin
        where id = #{id}
    </select>

    <select id="searchAlert" parameterType="neatlogic.framework.alert.dto.AlertVo" resultMap="alertResultMap">
        select a.id,
               a.level,
               a.title,
               a.alert_time                                                                          as alertTime,
               (SELECT count(x.to_alert_id) FROM alert_rel x WHERE x.from_alert_id = a.id LIMIT 100) AS childAlertCount,
               (select x.from_alert_id
                from alert_rel x
                where x.to_alert_id = a.id
                limit 1)                                                                             as fromAlertId,
               a.type,
               a.status,
               a.source,
               a.unique_key                                                                          as uniqueKey,
               a.alert_count                                                                         as alertCount,
               a.entity_type                                                                         as entityType,
               a.entity_name                                                                         as entityName,
               a.ip,
               a.port,
               b.content
        from (select * from alert order by alert_time limit #{startNum}, #{pageSize}) a
                 left join alert_attr b on a.id =
                                           b.alert_id
        order by alert_time desc
    </select>

    <sql id="searchAlertColumn">
        select a.id,
               (SELECT count(x.to_alert_id) FROM alert_rel x WHERE x.from_alert_id = a.id LIMIT 100) AS childAlertCount,
               (select x.from_alert_id from alert_rel x where x.to_alert_id = a.id limit 1)          as fromAlertId,
               a.level,
               a.title,
               a.alert_time                                                                          as alertTime,
               a.type,
               d.id                                                                                  as alertTypeId,
               d.name                                                                                as alertTypeName,
               d.label                                                                               as alertTypeLabel,
               a.status,
               a.source,
               a.unique_key                                                                          as uniqueKey,
               a.alert_count                                                                         as alertCount,
               a.entity_type                                                                         as entityType,
               a.entity_name                                                                         as entityName,
               a.ip,
               a.port,
               b.content,
               c.level                                                                               as alertLevel,
               c.name                                                                                as alertLevelName,
               c.label                                                                               as alertLevelLabel,
               c.color                                                                               as alertLevelColor
        from alert a
                 left join alert_attr b on a.id = b.alert_id
                 left join alert_level c on a.level = c.level
                 left join alert_type d on a.type = d.id
    </sql>


    <select id="getAlertByIdList" parameterType="neatlogic.framework.alert.dto.AlertVo"
            resultMap="alertResultMap">
        <include refid="searchAlertColumn"></include>
        where
        a.id in
        <foreach collection="idList" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
        order by a.alert_time desc
    </select>

    <select id="getAlertById" parameterType="java.lang.Long" resultMap="alertResultMap">
        <include refid="searchAlertColumn"></include>
        where a.id = #{value}
        order by a.alert_time desc
    </select>


    <select id="getAlertByUniqueKey" parameterType="java.lang.String"
            resultType="neatlogic.framework.alert.dto.AlertVo">
        select id
        from alert
        where unique_key = #{value}
        order by id
        limit 1
    </select>

    <update id="updateAlert" parameterType="neatlogic.framework.alert.dto.AlertVo">
        update alert
        set level       = #{level},
            title       = #{title},
            alert_time  = #{alertTime},
            type        = #{type},
            status      = #{status},
            source      = #{source},
            entity_type = #{entityType},
            entity_name = #{entityName},
            ip          = #{ip},
            port        = #{port}
        where id = #{id}
    </update>

    <insert id="saveAlertAttr" parameterType="neatlogic.framework.alert.dto.AlertVo">
        insert into alert_attr
            (alert_id, content)
        values (#{id}, #{attrObjStr,typeHandler=CompressHandler})
        ON DUPLICATE KEY UPDATE content = #{attrObjStr,typeHandler=CompressHandler}
    </insert>

    <insert id="saveAlertRel" parameterType="neatlogic.framework.alert.dto.AlertRelVo">
        insert ignore into alert_rel
            (from_alert_id, to_alert_id)
        values (#{fromAlertId}, #{toAlertId})
    </insert>

    <insert id="insertAlert" parameterType="neatlogic.framework.alert.dto.AlertVo">
        insert into alert
        (id,
         level,
         title,
         alert_time,
         type,
         status,
         source,
         is_delete,
         unique_key,
         entity_type,
         entity_name,
         ip,
         port)
        values (#{id},
                #{level},
                #{title},
                #{alertTime},
                #{type},
                #{status},
                #{source},
                0,
                #{uniqueKey},
                #{entityType},
                #{entityName},
                #{ip},
                #{port})
    </insert>

    <insert id="insertAlertOrigin" parameterType="neatlogic.framework.alert.dto.OriginalAlertVo">
        insert into alert_origin
        (id,
         content,
         type,
         time,
         error,
         status)
        values (#{id},
                #{content, typeHandler=CompressHandler},
                #{type},
                #{time},
                #{error, typeHandler=CompressHandler},
                #{status})
    </insert>


    <delete id="deleteAlertAttr" parameterType="java.lang.Long">
        delete
        from alert_attr
        where alert_id = #{value}
    </delete>

</mapper>
