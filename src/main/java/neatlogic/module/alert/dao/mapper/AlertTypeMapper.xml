<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="neatlogic.module.alert.dao.mapper.AlertTypeMapper">
    <select id="searchAlertTypeCount" parameterType="neatlogic.framework.alert.dto.AlertTypeVo" resultType="int">
        select count(1)
        from alert_type
        <include refid="searchAlertTypeSql"></include>
    </select>

    <select id="searchAlertType" parameterType="neatlogic.framework.alert.dto.AlertTypeVo"
            resultType="neatlogic.framework.alert.dto.AlertTypeVo">
        select id,
        name,
        label,
        is_active as isActive,
        file_id as fileId,
        lcd,
        lcu,
        fcd,
        fcu
        from alert_type
        <include refid="searchAlertTypeSql"></include>
        order by id desc
        <!--limit #{startNum}, #{pageSize}-->
    </select>

    <sql id="searchAlertTypeSql">
        <where>
            <if test="keyword != null and keyword != ''">
                and (name like concat(#{keyword}, '%') or label like concat(#{keyword}, '%'))
            </if>
            <if test="isActive != null">
                and is_active = #{isActive}
            </if>
        </where>
    </sql>

    <select id="getAlertTypeByName" parameterType="java.lang.String"
            resultType="neatlogic.framework.alert.dto.AlertTypeVo">
        select id,
               name,
               label,
               file_id   AS fileId,
               is_active as isActive,
               lcd,
               lcu,
               fcd,
               fcu
        from alert_type
        where name = #{value}
    </select>

    <resultMap id="alertTypeMap" type="neatlogic.framework.alert.dto.AlertTypeVo">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="label" column="label"/>
        <result property="fileId" column="fileId"/>
        <result property="isActive" column="isActive"/>
        <result property="lcd" column="lcd"/>
        <result property="lcu" column="lcu"/>
        <result property="fcd" column="fcd"/>
        <result property="fcu" column="fcu"/>
        <collection property="attrTypeList" ofType="neatlogic.framework.alert.dto.AlertAttrTypeVo">
            <id property="id" column="attrTypeId"/>
            <result property="name" column="attrTypeName"/>
            <result property="label" column="attrTypeLabel"/>
            <result property="type" column="attrTypeType"/>
            <result property="configStr" column="attrTypeConfigStr"/>
        </collection>
        <collection property="attrTypeIdList" ofType="java.lang.Long">
            <id column="attrTypeId"/>
        </collection>
    </resultMap>

    <select id="getAlertTypeById" parameterType="java.lang.Long" resultMap="alertTypeMap">
        select a.id,
               a.name,
               a.label,
               a.file_id   AS fileId,
               a.is_active as isActive,
               a.lcd,
               a.lcu,
               a.fcd,
               a.fcu,
               c.id        as attrTypeId,
               c.name      as attrTypeName,
               c.label     as attrTypeLabel,
               c.type      as attrTypeType,
               c.config    as attrTypeConfigStr
        from alert_type a
                 left join alert_type_attrtype b on a.id = b.alerttype_id
                 left join alert_attrtype c on b.attrtype_id = c.id and c.is_active = 1
        where a.id = #{value}
    </select>

    <select id="checkAlertTypeNameIsExists" parameterType="neatlogic.framework.alert.dto.AlertTypeVo" resultType="int">
        select count(1)
        from alert_type
        where id != #{id}
          and name = #{name}
    </select>

    <update id="updateAlertType" parameterType="neatlogic.framework.alert.dto.AlertTypeVo">
        update alert_type
        set name      = #{name},
            label     = #{label},
            file_id   = #{fileId},
            is_active = #{isActive},
            lcd       = now(),
            lcu       = #{lcu}
        where id = #{id}
    </update>

    <insert id="insertAlertType" parameterType="neatlogic.framework.alert.dto.AlertTypeVo">
        insert into alert_type
        (id,
         name,
         label,
         file_id,
         is_active,
         fcd,
         fcu)
        values (#{id},
                #{name},
                #{label},
                #{fileId},
                #{isActive},
                now(),
                #{fcu})
    </insert>

    <insert id="insertAlertTypeAttrType">
        insert ignore into alert_type_attrtype (alerttype_id, attrtype_id, sort)
        values (#{alertTypeId}, #{attrTypeId}, #{sort})
    </insert>

    <delete id="deleteAlertTypeAttrTypeByAlertTypeId" parameterType="java.lang.Long">
        delete
        from alert_type_attrtype
        where alerttype_id = #{value}
    </delete>

    <delete id="deleteAlertTypeById" parameterType="java.lang.Long">
        delete
        from alert_type
        where id = #{value}
    </delete>

</mapper>
